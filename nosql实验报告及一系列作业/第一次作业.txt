wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz

tar -zxvf mongodb-linux-x86_64-4.0.1.tgz


vim  /etc/profile
export PATH=<mongodb-install-directory>/bin:$PATH




3.2 创建MongoDB数据存放文件夹和日志记录文件夹，为后面的配置文件使用：

mkdir -p  /opt/soft/mongodb-linux-x86_64-3.0.6/database
mkdir -p /opt/soft/mongodb-linux-x86_64-3.0.6/log
3.3 创建MongoDB运行时使用的配置文件：
进入bin目录下：cd  /opt/mongodb-4.0.1/bin
创建mongodb.conf配置文件：vim mongodb.conf
会提示是new file，直接输入下面内容：
dbpath = /opt/soft/mongodb-linux-x86_64-3.0.6/database #数据文件存放目录
logpath = /opt/soft/mongodb-linux-x86_64-3.0.6/log #日志文件存放目录
port = 27017 #端口
fork = true #以守护程序的方式启用，即在后台运行
#auth=true #需要认证。如果放开注释，就必须创建MongoDB的账号，使用账号与密码才可远程访问，第一次安装建议注释
bind_ip=0.0.0.0 #允许远程访问，或者直接注释，127.0.0.1是只允许本地访问

进入bin目录下：cd  /opt/mongodb-4.0.1/bin
加载配置文件方式启动：./mongod  -f  mongodb.conf



结果是运行失败，说找不到数据库目录，线程不安全，且0.0.0.0的连接方式不允许
于是换了一种方法
不以配置mongodb.conf运行，
而是mkdir /data/db 这是mongo默认的db目录，
然后在mongo的bin目录下 ./mongod    运行成功


本地下载了redis-5.0.0.tar.gz
通过xftp上传到linux
将文件mv到/opt/soft
tar -xvf redis-5.0.0.tar.gz
进入解压后的bin目录
先make
等待完成后再make install
创建相关目录
mkdir -p /opt/redis-5.0.0/bin
mkdir -p /opt/redis-5.0.0/log
mkdir -p /opt/redis-5.0.0/pid
mkdir -p /opt/redis-5.0.0/db
配置启动文件
vi /opt/soft/redis-5.0.0/redis.conf
将bind  127.0.0.1改成bind 0.0.0.0
将protected-mode yes改为no，设置为不需要密码
将daemonize no设置为yes，设置为守护进程运行
最后redis-server /opt/soft/redis-5.0.0/redis.conf运行
通过redis-cli 进入客户端进行命令


通过eclipse 创建maven项目
导入redis依赖
////
<commons-pool2-2.0.version>2.0</commons-pool2-2.0.version>
	<spring-data-redis-1.5.0.RELEASE.version>1.5.0</spring-data-redis-1.5.0.RELEASE.version>
	<sqljdbc4.version>4.0</sqljdbc4.version>
	<commons-dbcp.version>1.4</commons-dbcp.version>
  </properties>

  <dependencies>
  <dependency>
		<groupId>commons-dbcp</groupId>
		<artifactId>commons-dbcp</artifactId>
		<version>${commons-dbcp.version}</version>
	</dependency>
    <dependency>
		<groupId>sql</groupId>
		<artifactId>sqljdbc4</artifactId>
		<version>${sqljdbc4.version}</version>
	</dependency>
  <dependency>
		<groupId>com.redis</groupId>
		<artifactId>spring-data-redis-1.5.0.RELEASE</artifactId>
		<version>${spring-data-redis-1.5.0.RELEASE.version}</version>
	</dependency>
    <dependency>
		<groupId>com.redis</groupId>
		<artifactId>commons-pool2-2.0</artifactId>
		<version>${commons-pool2-2.0.version}</version>
	</dependency>
  <dependency>
		<groupId>com.redis</groupId>
		<artifactId>jedis-2.3.1</artifactId>
		<version>${jedis-2.3.1.version}</version>
	</dependency>

/////
创建工具类 --具体见项目src下Main.RedisUtil

在applicationContext中配置jedis配置
<context:property-placeholder location="classpath:redis.properties,classpath:db.properties" />
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" > 
        <!--最大空闲数--> 
        <property name="maxIdle" value="${redis.maxIdle}" /> 
        <!--连接池的最大数据库连接数  -->
        <property name="maxTotal" value="${redis.maxTotal}" />
        <!--最大建立连接等待时间--> 
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" /> 
        <!--逐出连接的最小空闲时间 默认1800000毫秒(30分钟)-->
        <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
        <!--每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3-->
        <property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />
        <!--逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1-->
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
        <!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个--> 
        <property name="testOnBorrow" value="${redis.testOnBorrow}" /> 
        <!--在空闲时检查有效性, 默认false  -->
        <property name="testWhileIdle" value="${redis.testWhileIdle}" /> 
    </bean >
<bean id="redisUtil" class="Main.RedisUtil">
    	<property name="redisTemplate" ref="redisTemplate" />
    </bean>

在controller中注入
	@Autowired
	private RedisUtil redisUtil;
即可远程使用redis
		System.out.println(redisUtil.get(name));
		redisUtil.set("name", "how2java");
		System.out.println(redisUtil.get("name"));
		redisUtil.del("name");
		System.out.println(redisUtil.get("name"));
		
		//=====================testNumber======================
		long incr = redisUtil.incr("number", 1);
		System.out.println(incr);
		incr =redisUtil.incr("number", 1);
		System.out.println(incr);
		
		//=====================testMap======================		
		Map<String,Object> map=new HashMap<>();
		map.put("name", "meepo");
		map.put("pwd", "password");
		redisUtil.hmset("user", map);
		System.out.println(redisUtil.hget("user","name"));



